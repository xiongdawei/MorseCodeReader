module MorseCodeReader(
    input  [1:0] sw,   // binary input from switches
                       // sw[0] dot
                       // sw[1] dash
    input        btnC, // push button being used as reset
    input        clk,  // 100 MHz clock generated by Basys 3
    // reg    [3:0] prev_state,
    output [6:0] seg,  // segments
    output [3:0] an   // display specific anodes
);

wire [4:0] morse;

wire [1:0] prev_state;

// machine state decode
parameter ONE   = 5'b01111;
parameter TWO   = 5'b00111;
parameter THREE = 5'b00011;
parameter FOUR  = 5'b00001;
parameter FIVE  = 5'b00000;
parameter SIX   = 5'b10000;
parameter SEVEN = 5'b11000;
parameter EIGHT = 5'b11100;
parameter NINE  = 5'b11110;
parameter ZERO  = 5'b11111;


// Get morse[4:0]
decoder morseDecoder(sw, clk, btnc, morse);
wire [3:0] number;

// With input morse code 5'd13333, the output is 4'b0001
assign state_one    = morse == ONE;  // if morse == 13333 then state_one = 1, ELSE state_one = 0
assign state_two    = morse == TWO;
assign state_three  = morse == THREE;
assign state_four   = morse == FOUR;
assign state_five   = morse == FIVE;
assign state_six    = morse == SIX;
assign state_seven  = morse == SEVEN;
assign state_eight  = morse == EIGHT;
assign state_nine   = morse == NINE;
assign state_zero   = morse ==  ZERO;
assign state_undefined = ~(state_one + state_two + state_three + state_four + state_five + state_six + state_seven + state_eight + state_nine + state_zero);
// The four digits output for state_undefined is 4'b1110

// determine the input for seven-seg display
assign number[3] = state_eight + state_nine + state_undefined ;
assign number[2] = state_four + state_five + state_six + state_seven + state_undefined;
assign number[1] = state_two + state_three + state_six + state_seven + state_undefined;
assign number[0] = state_one + state_three + state_five + state_seven + state_nine;

// module instantiation: YOU SHOULD NOT HAVE TO EDIT ANY OF THIS
// DisplayRotator dispRot(clk_5MHz, sw[1], centisec, decisec, sec, tensec, min, tenmin, an, dpEnable, currentDigit);
assign an = 4'b1110;
BCDToLED bcdConverter(number, seg, );
endmodule