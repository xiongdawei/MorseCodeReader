module Stopwatch(
    input  [4:0] sw,   // binary input from switches
                       // sw[0] unknown
                       // sw[1] dot
                       // sw[2] space
                       // sw[3] dash
    input        btnC, // push button being used as reset
    input        clk,  // 100 MHz clock generated by Basys 3
    output [6:0] seg,  // segments
    output [3:0] an,   // display specific anodes
    output       dp    // display specific decimal points
);

wire       clk_5MHz, clk_100Hz;

wire [3:0] currentDigit;
wire [3:0] centisec;
wire [3:0] decisec;
wire [3:0] sec;
wire [3:0] tensec;
wire [3:0] min;
wire [3:0] tenmin;

wire [5:0] enable;
wire [5:0] clear;

wire       dpEnable;

// module instantiation: YOU SHOULD NOT HAVE TO EDIT ANY OF THIS

clk_wiz_0 dividerA(clk_5MHz, clk);
ClockDivider dividerB(clk_5MHz, btnC, sw[4:3], sw[2], clk_100Hz);

DisplayRotator dispRot(clk_5MHz, sw[1], centisec, decisec, sec, tensec, min, tenmin, an, dpEnable, currentDigit);
BCDToLED bcdConverter(currentDigit, seg, );

Counter myCounterCS(clk_100Hz, btnC, enable[0], clear[0], centisec);
Counter myCounterDS(clk_100Hz, btnC, enable[1], clear[1], decisec);
Counter myCounterS(clk_100Hz, btnC, enable[2], clear[2], sec);
Counter myCounterTS(clk_100Hz, btnC, enable[3], clear[3], tensec);
Counter myCounterM(clk_100Hz, btnC, enable[4], clear[4], min);
Counter myCounterTM(clk_100Hz, btnC, enable[5], clear[5], tenmin);


// enable/clear logic: YOU NEED TO IMPLEMENT THESE

assign enable[0] = sw[0];
assign enable[1] = 1'b0;
assign enable[2] = 1'b0;
assign enable[3] = 1'b0;
assign enable[4] = 1'b0;
assign enable[5] = 1'b0;

assign clear[0] = 1'b0;
assign clear[1] = 1'b0;
assign clear[2] = 1'b0;
assign clear[3] = 1'b0;
assign clear[4] = 1'b0;
assign clear[5] = 1'b0;


// decimal point logic: YOU SHOULD NOT NEED TO EDIT THIS

assign dp = dpEnable | (decisec < 4'd5);


endmodule